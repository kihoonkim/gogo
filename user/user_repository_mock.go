// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./user/user_repository.go

package user

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoryRecorder
}

// Recorder for MockRepository (not exported)
type _MockRepositoryRecorder struct {
	mock *MockRepository
}

func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &_MockRepositoryRecorder{mock}
	return mock
}

func (_m *MockRepository) EXPECT() *_MockRepositoryRecorder {
	return _m.recorder
}

func (_m *MockRepository) Save(user *User) User {
	ret := _m.ctrl.Call(_m, "Save", user)
	ret0, _ := ret[0].(User)
	return ret0
}

func (_mr *_MockRepositoryRecorder) Save(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save", arg0)
}

func (_m *MockRepository) FindAll() []User {
	ret := _m.ctrl.Call(_m, "FindAll")
	ret0, _ := ret[0].([]User)
	return ret0
}

func (_mr *_MockRepositoryRecorder) FindAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindAll")
}

func (_m *MockRepository) FindById(id string) User {
	ret := _m.ctrl.Call(_m, "FindById", id)
	ret0, _ := ret[0].(User)
	return ret0
}

func (_mr *_MockRepositoryRecorder) FindById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindById", arg0)
}
